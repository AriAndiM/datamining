Traceback (most recent call last):
  File "/usr/local/lib/python3.7/dist-packages/jupyter_cache/executors/utils.py", line 56, in single_nb_execution
    record_timing=False,
  File "/usr/local/lib/python3.7/dist-packages/nbclient/client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/usr/local/lib/python3.7/dist-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/usr/local/lib/python3.7/dist-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/usr/lib/python3.7/asyncio/base_events.py", line 587, in run_until_complete
    return future.result()
  File "/usr/local/lib/python3.7/dist-packages/nbclient/client.py", line 664, in async_execute
    cell, index, execution_count=self.code_cells_executed + 1
  File "/usr/local/lib/python3.7/dist-packages/nbclient/client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/usr/local/lib/python3.7/dist-packages/nbclient/client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# library for Naive Bayes Gaussian
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score
from sklearn.metrics import make_scorer, accuracy_score,precision_score
from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix
from sklearn.metrics import precision_score,recall_score,f1_score
from sklearn.preprocessing import LabelEncoder

#Model Select
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB

from sklearn.model_selection import train_test_split
from sklearn.metrics import roc_curve
from sklearn.metrics import roc_auc_score
from sklearn.metrics import accuracy_score

#train = data latih & test = data uji
#train_size dan test_size jika di jumlah harus = 1
training, test = train_test_split(X, train_size = 0.8, test_size = 0.2, shuffle=False)
training_label, test_label = train_test_split(y, train_size = 0.8, test_size = 0.2, shuffle=False)

clf2 = GaussianNB()
clf2.fit(training, training_label)

probas = clf2.predict_proba(test)
probas = probas[:,1]
probas.shape

probas

test_label
------------------

[0;31m[0m
[0;31mValueError[0mTraceback (most recent call last)
[0;32m<ipython-input-6-2d3071389481>[0m in [0;36m<module>[0;34m[0m
[1;32m     23[0m [0;34m[0m[0m
[1;32m     24[0m [0mclf2[0m [0;34m=[0m [0mGaussianNB[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 25[0;31m [0mclf2[0m[0;34m.[0m[0mfit[0m[0;34m([0m[0mtraining[0m[0;34m,[0m [0mtraining_label[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     26[0m [0;34m[0m[0m
[1;32m     27[0m [0mprobas[0m [0;34m=[0m [0mclf2[0m[0;34m.[0m[0mpredict_proba[0m[0;34m([0m[0mtest[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/naive_bayes.py[0m in [0;36mfit[0;34m(self, X, y, sample_weight)[0m
[1;32m    244[0m         [0my[0m [0;34m=[0m [0mself[0m[0;34m.[0m[0m_validate_data[0m[0;34m([0m[0my[0m[0;34m=[0m[0my[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m    245[0m         return self._partial_fit(
[0;32m--> 246[0;31m             [0mX[0m[0;34m,[0m [0my[0m[0;34m,[0m [0mnp[0m[0;34m.[0m[0munique[0m[0;34m([0m[0my[0m[0;34m)[0m[0;34m,[0m [0m_refit[0m[0;34m=[0m[0;32mTrue[0m[0;34m,[0m [0msample_weight[0m[0;34m=[0m[0msample_weight[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    247[0m         )
[1;32m    248[0m [0;34m[0m[0m

[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/naive_bayes.py[0m in [0;36m_partial_fit[0;34m(self, X, y, classes, _refit, sample_weight)[0m
[1;32m    399[0m             [0mself[0m[0;34m.[0m[0mclasses_[0m [0;34m=[0m [0;32mNone[0m[0;34m[0m[0;34m[0m[0m
[1;32m    400[0m [0;34m[0m[0m
[0;32m--> 401[0;31m         [0mfirst_call[0m [0;34m=[0m [0m_check_partial_fit_first_call[0m[0;34m([0m[0mself[0m[0;34m,[0m [0mclasses[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    402[0m         [0mX[0m[0;34m,[0m [0my[0m [0;34m=[0m [0mself[0m[0;34m.[0m[0m_validate_data[0m[0;34m([0m[0mX[0m[0;34m,[0m [0my[0m[0;34m,[0m [0mreset[0m[0;34m=[0m[0mfirst_call[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m    403[0m         [0;32mif[0m [0msample_weight[0m [0;32mis[0m [0;32mnot[0m [0;32mNone[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/utils/multiclass.py[0m in [0;36m_check_partial_fit_first_call[0;34m(clf, classes)[0m
[1;32m    358[0m         [0;32melse[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    359[0m             [0;31m# This is the first call to partial_fit[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 360[0;31m             [0mclf[0m[0;34m.[0m[0mclasses_[0m [0;34m=[0m [0munique_labels[0m[0;34m([0m[0mclasses[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    361[0m             [0;32mreturn[0m [0;32mTrue[0m[0;34m[0m[0;34m[0m[0m
[1;32m    362[0m [0;34m[0m[0m

[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/utils/multiclass.py[0m in [0;36munique_labels[0;34m(*ys)[0m
[1;32m     73[0m     [0;31m# Check that we don't mix label format[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[1;32m     74[0m [0;34m[0m[0m
[0;32m---> 75[0;31m     [0mys_types[0m [0;34m=[0m [0mset[0m[0;34m([0m[0mtype_of_target[0m[0;34m([0m[0mx[0m[0;34m)[0m [0;32mfor[0m [0mx[0m [0;32min[0m [0mys[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     76[0m     [0;32mif[0m [0mys_types[0m [0;34m==[0m [0;34m{[0m[0;34m"binary"[0m[0;34m,[0m [0;34m"multiclass"[0m[0;34m}[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m     77[0m         [0mys_types[0m [0;34m=[0m [0;34m{[0m[0;34m"multiclass"[0m[0;34m}[0m[0;34m[0m[0;34m[0m[0m

[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/utils/multiclass.py[0m in [0;36m<genexpr>[0;34m(.0)[0m
[1;32m     73[0m     [0;31m# Check that we don't mix label format[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[1;32m     74[0m [0;34m[0m[0m
[0;32m---> 75[0;31m     [0mys_types[0m [0;34m=[0m [0mset[0m[0;34m([0m[0mtype_of_target[0m[0;34m([0m[0mx[0m[0;34m)[0m [0;32mfor[0m [0mx[0m [0;32min[0m [0mys[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     76[0m     [0;32mif[0m [0mys_types[0m [0;34m==[0m [0;34m{[0m[0;34m"binary"[0m[0;34m,[0m [0;34m"multiclass"[0m[0;34m}[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m     77[0m         [0mys_types[0m [0;34m=[0m [0;34m{[0m[0;34m"multiclass"[0m[0;34m}[0m[0;34m[0m[0;34m[0m[0m

[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/utils/multiclass.py[0m in [0;36mtype_of_target[0;34m(y)[0m
[1;32m    298[0m         ):
[1;32m    299[0m             raise ValueError(
[0;32m--> 300[0;31m                 [0;34m"You appear to be using a legacy multi-label data"[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    301[0m                 [0;34m" representation. Sequence of sequences are no"[0m[0;34m[0m[0;34m[0m[0m
[1;32m    302[0m                 [0;34m" longer supported; use a binary array or sparse"[0m[0;34m[0m[0;34m[0m[0m

[0;31mValueError[0m: You appear to be using a legacy multi-label data representation. Sequence of sequences are no longer supported; use a binary array or sparse matrix instead - the MultiLabelBinarizer transformer can convert to this format.
ValueError: You appear to be using a legacy multi-label data representation. Sequence of sequences are no longer supported; use a binary array or sparse matrix instead - the MultiLabelBinarizer transformer can convert to this format.

